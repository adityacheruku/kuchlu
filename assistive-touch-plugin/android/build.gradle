apply plugin: 'com.android.library'
// apply plugin: 'kotlin-android' // If your plugin uses Kotlin

android {
    namespace "com.kuchlu.plugin.assistivetouch" // Make this unique for your plugin
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro' // Good practice for libraries
    }

    buildTypes {
        release {
            minifyEnabled false // Libraries usually don't minify themselves
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lint {
        baseline = file("lint-baseline.xml")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11 // Or higher
        targetCompatibility JavaVersion.VERSION_11 // Or higher
    }
    // If using Kotlin:
    // kotlinOptions {
    //    jvmTarget = '1.8' // Or higher
    // }

    // If your plugin has its own local .jar files in assistive-touch-plugin/android/libs
    // you might need this, but it's better if dependencies are from Maven.
    // sourceSets {
    //    main {
    //        jniLibs.srcDirs = ['libs']
    //    }
    // }

    // Prevent conflicts with the main app's resources if plugin has its own
    resourcePrefix "assistivetouch_"
    // kotlinOptions {
    //     jvmTarget = '11'
    // } // Choose a unique prefix
}

repositories {
    // If this plugin depends on libraries not on Google/MavenCentral, declare them here
    // google()
    // mavenCentral()
}

dependencies {
    implementation "androidx.appcompat:appcompat:$rootProject.ext.androidxAppCompatVersion" // Or other specific AndroidX libs
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'androidx.test:core:1.4.0'
    // --- CRUCIAL for a Capacitor plugin ---
    // Make sure the version matches your project's Capacitor version
    // You can use rootProject.ext.capacitorVersion if defined in the root build.gradle
    implementation project(':capacitor-android')
    // annotationProcessor "com.getcapacitor:capacitor-annotation:7.3.0"

                 // Use 'api' so it's available to app
    // If capacitorVersion is not in ext, use a specific version:
    // api "com.capacitorjs:capacitor:5.6.0" // Example version

    // Add any other specific dependencies your plugin needs
    // e.g., implementation 'com.google.code.gson:gson:2.10.1'

    // If your plugin has local JARs in its own 'libs' folder:
    // implementation fileTree(dir: 'libs', include: ['*.jar'])
}